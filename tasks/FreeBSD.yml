---

- name: install java & tomcat
  pkgng:
    name:
      - tomcat{{ tomcat_version | regex_replace("[\.0]","") }}
      - '{{ freebsd_jdk_pkg }}'
      - tomcat-native
    state: present

- name: install memcached
  pkgng:
    name: memcached
    state: present
  when: memcached_nodes is search(ansible_hostname) or memcached_nodes is search("localhost")

- name: x509 certs
  block:
    - name: ca-certificates-java.jar
      copy:
        src: ca-certificates-java.jar
        dest: /root/ca-certificates-java.jar
        mode: '0644'
    - name: mkdir /etc/ssl/certs/java
      file:
        path: /etc/ssl/certs/java
        state: directory
        mode: '0755'
    - name: stat /etc/ssl/certs/java/cacerts
      stat:
        path: /etc/ssl/certs/java/cacerts
      register: stat_cacerts
    - name: stat /usr/local/etc/ssl/certs
      stat:
        path: /usr/local/etc/ssl/certs
      register: stat_local_certs
    - name: update cacerts if needed
      shell: "( find /usr/share/certs/trusted /usr/local/etc/ssl/certs -type f | sed 's@^@+@'; find /usr/share/certs/blacklisted | sed 's@^@-@' ) | java -Xmx64m -jar /root/ca-certificates-java.jar -storepass 'changeit'"
      register: update_cacerts
      when: stat_local_certs.stat.exists and ( not stat_cacerts.stat.exists or stat_cacerts.stat.mtime < stat_local_certs.stat.mtime )
    - name: stat {{ freebsd_jdk_pkg }} cacerts
      stat:
        path: '{{ tomcat_jre_dir }}/lib/security/cacerts'
        follow: no
      register: jre_cacerts
    - name: move static cacerts
      copy:
        src: '{{ tomcat_jre_dir }}/lib/security/cacerts'
        dest: '{{ tomcat_jre_dir }}/lib/security/cacerts.orig'
        remote_src: yes
      when: jre_cacerts.stat.isreg
    - name: rm cacerts
      file:
        path: '{{ tomcat_jre_dir }}/lib/security/cacerts'
        state: absent
      when: jre_cacerts.stat.isreg
    - name: replace jre cacerts
      file:
        path: '{{ tomcat_jre_dir }}/lib/security/cacerts'
        follow: no
        state: link
        src: /etc/ssl/certs/java/cacerts
    - name: post-upgrade.sh/java_cacerts
      blockinfile:
        dest: /root/post-upgrade.sh
        marker: '# {mark} ANSIBLE java-cacerts BLOCK'
        block: |
          mkdir -p /etc/ssl/certs/java
          lastcacerts=$(stat -f %m /etc/ssl/certs/java/cacerts || echo 0)
          for d in /usr/share/certs/trusted /usr/local/etc/ssl/certs /usr/share/certs/blacklisted; do
            lastd=$(stat -f %m "$d")
            if [ "$lastd" -gt "$lastcacerts" ]; then
              ( find /usr/share/certs/trusted /usr/local/etc/ssl/certs -type f | sed 's@^@+@'; find /usr/share/certs/blacklisted | sed 's@^@-@' ) | java -Xmx64m -jar /root/ca-certificates-java.jar -storepass 'changeit'
              break
            fi
          done
          for jre in $(ls -d /usr/local/openjdk*); do
            [ -d "$jre/jre" ] && jre="$jre/jre"
            if [ ! -L "$jre/lib/security/cacerts" ]; then
              echo "$jre/lib/security/cacerts -> /etc/ssl/certs/java/cacerts"
              mv $jre/lib/security/cacerts $jre/lib/security/cacerts.orig
              ln -s /etc/ssl/certs/java/cacerts $jre/lib/security/cacerts
            fi
          done
        mode: '0750'
  when: x509_ca_path | default(False)

- name: tomcat group
  group:
    name: '{{ tomcat_group }}'
    state: present
  when: do_sys

- name: tomcat user
  user:
    name: '{{ tomcat_user }}'
    group: '{{ tomcat_group }}'
    home: /nonexistent
    shell: /usr/sbin/nologin
    createhome: False
    login_class: daemon
    state: present
  when: do_sys

- name: mkdir
  file:
    path: '{{ tomcat_log_dir }}'
    state: directory
    group: '{{ tomcat_group }}'
    mode: '0770'

- name: chown :tomcat dirs
  file:
    path: '{{ item }}'
    mode: u=rwX,g=rX,o-rwx
    group: '{{ tomcat_group }}'
    recurse: no
  with_items:
    - '{{ tomcat_config_dir }}'

- name: chown tomcat dirs
  file:
    path: '{{ item }}'
    mode: u=rwX,g=rwX,o-rwx
    owner: '{{ tomcat_user }}'
    recurse: yes
  with_items:
    - '{{ tomcat_log_dir }}'
    - '{{ tomcat_webapps_dir }}'
    - '{{ tomcat_work_dir }}'
    - '{{ tomcat_config_dir }}/Catalina'
  when: do_sys

- name: login.conf utf8
  blockinfile:
    block: |
      tomcat:\
            :charset=UTF-8:\
            :lang=en_US.UTF-8:\
            :tc=default:
    marker: '{mark} ANSIBLE MANAGED tomcat'
    backup: yes
    validate: 'cap_mkdb %s'
    path: /etc/login.conf
  notify: cap_mkdb login.conf
  when: do_sys

- name: newsyslog
  template:
    src: newsyslog_tomcat.conf
    dest: /usr/local/etc/newsyslog.conf.d/tomcat.conf
  when: do_sys

- name: enable tomcat
  lineinfile:
    dest: /etc/rc.conf
    line: 'tomcat{{ tomcat_version | regex_replace("[\.0]","") }}_{{ item.key }}="{{ item.value }}"'
    regexp: '^tomcat{{ tomcat_version | regex_replace("[\.0]","") }}_{{ item.key }}='
  with_dict:
    enable: "YES"
    catalina_user: '{{ tomcat_user }}'
    stdout: '{{ tomcat_log_dir }}/catalina.out'
    stderr: '{{ tomcat_log_dir }}/catalina.err'
    java_opts: "{{ tomcat_java_opts }} {{ tomcat_lang_opts }}{% if tomcat_keystore != '' %} -Djavax.net.ssl.trustStore=/etc/ssl/{{ tomcat_keystore | regex_replace('.*/','') }} -Djavax.net.ssl.trustStorePassword='{{ tomcat_storepass }}'{% endif %}{% if ansible_all_ipv4_addresses | count() == 0 %} -Djava.net.preferIPv4Stack=false -Djava.net.preferIPv6Addresses=true{% elif ansible_all_ipv6_addresses | count() > 0 %} -Djava.net.preferIPv4Stack=false{% endif %}"
    java_home: '{{ tomcat_jre_dir }}'
    classpath: "{% if classpath_adds != '' %}:{{ classpath_adds }}{% endif %}"
    tmp_dir: "{% if tomcat_tmp_dir != '' %}{{ tomcat_tmp_dir }}{% else %}/var/tmp/{{ tomcat_service }}{% endif %}"
    wait: '5'
  notify: restart tomcat

- name: sysctl net.inet6.ip6.v6only
  lineinfile:
    dest: /etc/sysctl.conf
    line: 'net.inet6.ip6.v6only=0'
    regexp: '^net.inet6.ip6.v6only='
  notify: sysctl v6only 0

- name: tomcat env vars
  lineinfile:
    dest: /etc/rc.conf
    line: 'tomcat{{ tomcat_version | regex_replace("[\.0]","") }}_env="{% for k in tomcat_env_vars.keys() %}{{ k }}=\"{{ tomcat_env_vars[k] }}\" {% endfor %}"'
    regexp: 'tomcat{{ tomcat_version | regex_replace("[\.0]","") }}_env='
  when: tomcat_env_vars.keys() | count() > 0
